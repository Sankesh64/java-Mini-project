// DisasterReliefDAO.java (Updated) [Add karna main file mai for strong passwords]
import org.mindrot.jbcrypt.BCrypt; // Add this import

public class DisasterReliefDAO {
    // ... existing fields and constructor ...

    // NEW: Helper to hash passwords
    private String hashPassword(String plainPassword) {
        return BCrypt.hashpw(plainPassword, BCrypt.gensalt(12));
    }

    // UPDATED: insertUser with hashing
    public void insertUser(String username, String password, String email, String location) throws SQLException {
        String sql = "INSERT INTO users (username, password, email, location) VALUES (?, ?, ?, ?)";
        try (Connection conn = getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, username);
            stmt.setString(2, hashPassword(password)); // Hashed!
            stmt.setString(3, email);
            stmt.setString(4, location);
            stmt.executeUpdate();
        }
    }

    // Similarly update other insert methods that handle passwords:
    public void insertVolunteer(String username, String password, String availability, String location) throws SQLException {
        String sql = "INSERT INTO volunteers (username, password, availability, location) VALUES (?, ?, ?, ?)";
        try (Connection conn = getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, username);
            stmt.setString(2, hashPassword(password)); // Hashed!
            stmt.setString(3, availability);
            stmt.setString(4, location);
            stmt.executeUpdate();
        }
    }

    public void insertNGO(String orgUsername, String password, String orgType, String contact) throws SQLException {
        String sql = "INSERT INTO ngos (org_username, password, org_type, contact) VALUES (?, ?, ?, ?)";
        try (Connection conn = getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, orgUsername);
            stmt.setString(2, hashPassword(password)); // Hashed!
            stmt.setString(3, orgType);
            stmt.setString(4, contact);
            stmt.executeUpdate();
        }
    }

    // ... rest of your existing methods ...
}
